name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        go: ['1.13.15', '1.14.15', '1.15.10', '1.16.2']
        zfs-rel: ['0.7.13', '0.8.3', '2.0.4']
      fail-fast: false
        
    env:
      AZURE_CUSTOM_ENDPOINT: http://127.0.0.1:10000/devstoreaccount1
      AWS_S3_CUSTOM_ENDPOINT: http://127.0.0.1:9000
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      GCS_FAKE_SERVER: "https://localhost:4443"
    steps:
    - name: checkout
      uses: actions/checkout@v2
    
    - name: Setup Environment
      run: |
        export MAKEFLAGS=-j$(($(grep -c '^processor' /proc/cpuinfo) * 2 + 1))
        export GOPATH=$HOME/go
        export PATH=/usr/lib/ccache:$GOPATH/bin:$PATH
    - name: Install Dependancies
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y linux-headers-`uname -r` tree uuid-dev libattr1-dev libblkid-dev jq gnupg2 xz-utils gzip curl

    - name: Create zfs directory
      run: mkdir -p $HOME/zfs
        
    # not needed for versions of zfs > 0.7.3
    - name: Download SPL
      if: ${{matrix.zfs-rel == '0.7.3'}}
      run: |
        cd $HOME/zfs
        curl -L https://github.com/openzfs/zfs/releases/download/zfs-${{matrix.zfs-rel}}/spl-${{matrix.zfs-rel}}.tar.gz | tar xz

    - name: Download ZFS
      run: |
        cd $HOME/zfs
        curl -L https://github.com/openzfs/zfs/releases/download/zfs-${{matrix.zfs-rel}}/zfs-${{matrix.zfs-rel}}.tar.gz | tar xz

    # not needed for versions of zfs > 0.7.3 
    - name: Install SPL
      if: ${{matrix.zfs-rel == '0.7.3'}}
      run: |
        cd $HOME/zfs
        cd spl-${{matrix.zfs-rel}} && ./configure --prefix=/usr && make && sudo make install

    - name: Export autoconf logs
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: spl-config.log
        path: '~/zfs/spl-${{matrix.zfs-rel}}/config.log'
        if-no-files-found: error

        
    - name: Install ZFS
      run: |
        cd $HOME/zfs
        cd zfs-${{matrix.zfs-rel}} && ./configure --prefix=/usr && make && sudo make install

    - name: Export autoconf logs
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: zfs-config.log
        path: '~/zfs/spl-${{matrix.zfs-rel}}/config.log'
        if-no-files-found: error


    - name: Finish setup
      run: |
        sudo modprobe zfs
        cd $GITHUB_WORKSPACE
        mkdir temp
        export TMPDIR=$PWD/temp
        export VDEV=$(mktemp)
        chmod +x ./travis-setup.sh && ./travis-setup.sh

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: $ {{ matrix.go }}
        
    - name: Build
      run: |
        GO111MODULE=off go get github.com/mitchellh/gox
        make get
        make build

    - name: Test
      run: |
        chmod +x ./integration_test.sh && ./integration_test.sh
        #sudo -E TMPDIR=$TMPDIR $(which go) test -race -v -coverprofile=coverage.out -covermode=atomic -coverpkg=$(go list ./... | grep -v '/vendor/' | paste -sd, -) ./...
        
    - name: Cleanup
      run: |
        chmod +x ./travis-teardown.sh && ./travis-teardown.sh

  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        go: ['1.13.15', '1.14.15', '1.15.10', '1.16.2']
        zfs-rel: ['0.7.13', '0.8.3', '2.0.4']

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: latest

 #test:
 #  runs-on: ${{ matrix.os }}
 #  strategy:
 #    matrix:
 #      os: [ubuntu-latest]
 #      go: ['1.13.15', '1.14.15', '1.15.10', '1.16.2']
 #      zfs-rel: ['0.7.13', '0.8.3', '2.0.4']

 #  steps:
 #    - name: Set up Go
 #      uses: actions/setup-go@v1
 #      with:
 #        go-version: ${{matrix.go}}

 #    - name: Check out code
 #      uses: actions/checkout@v2
 #                                                                          
 #    - name: Install dependencies
 #      run: go mod download
 #      
 #    - name: Run Unit tests
 #      run: go test -race -covermode atomic -coverprofile=coverage.out ./...

 #    - name: Install goveralls
 #      env: 
 #        GO111MODULE: off
 #      run: go get github.com/mattn/goveralls
 #      
 #    - name: Send coverage
 #      env:
 #        COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 #      run: goveralls -coverprofile=covprofile -service=github
 #      # or use shogo82148/actions-goveralls
 #      # - name: Send coverage
 #      #   uses: shogo82148/actions-goveralls@v1
 #      #   with:
 #      #     path-to-profile: covprofile

    

